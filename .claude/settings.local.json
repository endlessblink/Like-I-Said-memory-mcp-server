{
  "permissions": {
    "allow": [
      "Bash(npm:*)",
      "Bash(pkill:*)",
      "Bash(rg:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(curl:*)",
      "Bash(lsof:*)",
      "Bash(ss:*)",
      "Bash(true)",
      "Bash(fuser:*)",
      "Bash(node:*)",
      "Bash(npx:*)",
      "Bash(hostname:*)",
      "Bash(ls:*)",
      "Bash(killall:*)",
      "Bash(rm:*)",
      "Bash(grep:*)",
      "Bash(git push:*)",
      "Bash(chmod:*)",
      "Bash(find:*)",
      "Bash(./install-universal.sh:*)",
      "Bash(bash:*)",
      "Bash(dos2unix:*)",
      "Bash(sed:*)",
      "Bash(cp:*)",
      "mcp__like-i-said-memory__list_memories",
      "mcp__like-i-said-memory__search_memories",
      "mcp__like-i-said-memory__add_memory",
      "mcp__like-i-said-memory__test_tool",
      "Bash(cat:*)",
      "mcp__firecrawl-mcp__firecrawl_scrape",
      "mcp__firecrawl-mcp__firecrawl_search",
      "mcp__like-i-said-v2__test_tool",
      "mcp__like-i-said-v2__add_memory",
      "mcp__like-i-said-v2__list_memories",
      "mcp__like-i-said-v2__search_memories",
      "mcp__like-i-said-v2__get_memory",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__playwright-mcp__browser_navigate",
      "Bash(mkdir:*)",
      "Bash(cmd.exe:*)",
      "Bash(jq:*)",
      "Bash(kill:*)",
      "mcp__like-i-said-v2__delete_memory",
      "mcp__claude-task-master__get_tasks",
      "Bash(mv:*)",
      "Bash(touch:*)",
      "Bash(source ~/.bashrc)",
      "Bash(if [ -n \"$USER\" ])",
      "Bash(then echo \"üéâ SUCCESS! New token works - authenticated as: $USER\")",
      "Bash(else echo \"‚ùå New token authentication failed\")",
      "Bash(fi)",
      "Bash(git pull:*)",
      "Bash(git reset:*)",
      "Bash(gh auth:*)",
      "Bash(git checkout:*)",
      "mcp__playwright-mcp__browser_close",
      "mcp__playwright-mcp__browser_take_screenshot",
      "WebFetch(domain:github.com)",
      "mcp__like-i-said-v2__github_create_issue",
      "Bash(git tag:*)",
      "Bash(git rm:*)",
      "Bash(./claude-code-init.sh:*)",
      "Bash(./claude-mcp-init.sh:*)",
      "Bash(timeout:*)",
      "Bash(if [ -d tools/claude-code-error-handling ])",
      "Bash(then mv tools/claude-code-error-handling/* scripts/)",
      "Bash(NODE_ENV=development npm run build)",
      "Bash(google-chrome:*)",
      "Bash(claude config list)",
      "Bash(claude mcp)",
      "Bash(claude mcp:*)",
      "Bash(CHOKIDAR_USEPOLLING=true npm run dev)",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_evaluate",
      "mcp__puppeteer__puppeteer_click",
      "mcp__like-i-said-v2__generate_dropoff",
      "mcp__playwright-mcp__browser_console_messages",
      "Bash(rsync:*)",
      "Bash(syncthing:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(./setup-syncthing.sh:*)",
      "Bash(./auto-setup-syncthing.sh:*)",
      "Bash(./full-auto-sync.sh:*)",
      "Bash(git stash push:*)",
      "Bash(systemctl --user status syncthing)",
      "Bash(ln:*)",
      "Bash(echo:*)",
      "mcp__server-sequential-thinking__sequentialthinking",
      "Bash(md5sum:*)",
      "Bash(diff:*)",
      "mcp__like-i-said-v2__list_tasks",
      "mcp__like-i-said-v2__get_task_context",
      "mcp__like-i-said-v2__update_task",
      "mcp__playwright-mcp__browser_snapshot",
      "Bash(time:*)",
      "Bash(systemctl status:*)",
      "Bash(service ollama:*)",
      "Bash(ollama list:*)",
      "Bash(/mnt/c/Users/endlessblink/AppData/Local/Programs/Ollama/ollama.exe list)",
      "Bash(powershell.exe:*)",
      "mcp__playwright-mcp__browser_click",
      "Bash(./quick-test.sh:*)",
      "mcp__playwright-mcp__browser_press_key",
      "Bash(ollama:*)",
      "mcp__playwright-mcp__browser_resize",
      "Bash(./test-ollama-wsl.sh:*)",
      "mcp__like-i-said-v2__create_task",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(sudo lsof:*)",
      "mcp__perplexity-ask__perplexity_ask",
      "Bash(./start-dashboard.sh:*)",
      "mcp__playwright-mcp__browser_navigate_back",
      "Bash(export:*)",
      "Bash(sudo systemctl stop:*)",
      "Bash(sudo rm:*)",
      "WebFetch(domain:gist.github.com)",
      "Bash(./diagnose-wsl-mcp.sh:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "like-i-said-memory",
    "like-i-said-v2",
    "puppeteer",
    "playwright-mcp",
    "perplexity-ask",
    "contentful",
    "github",
    "server-sequential-thinking",
    "site-control-mcp"
  ],
  "disabledMcpjsonServers": []
}