{
  "manifest_version": "1.0.0",
  "name": "Like-I-Said MCP Server (Hybrid Multi-Approach)",
  "description": "Advanced memory & task management with automatic fallback strategies",
  "version": "2.4.3-hybrid",
  "author": "EndlessBlink",
  "license": "MIT",
  "homepage": "https://github.com/endlessblink/Like-I-Said-memory-mcp-server",
  "mcp": {
    "version": "0.1.0",
    "transport": [
      "stdio"
    ],
    "commands": {
      "default": {
        "command": "python3",
        "args": [
          "launcher.py"
        ],
        "description": "Intelligent launcher with automatic fallback"
      },
      "diagnostic": {
        "command": "python3",
        "args": [
          "launcher.py",
          "--diagnostic"
        ],
        "description": "Run diagnostic mode"
      },
      "python": {
        "command": "python3",
        "args": [
          "python/protocol_compliant_server.py"
        ],
        "description": "Direct Python server"
      },
      "node": {
        "command": "node",
        "args": [
          "enhanced-bridge.js"
        ],
        "description": "Enhanced Node.js bridge"
      },
      "original": {
        "command": "node",
        "args": [
          "server-markdown.js"
        ],
        "description": "Original Node.js server"
      }
    }
  },
  "tools": [
    {
      "name": "add_memory",
      "description": "Store information with auto-categorization",
      "input_schema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "project": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "reference"
            ]
          },
          "related_memories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ]
      }
    },
    {
      "name": "search_memories",
      "description": "Search memories with advanced filtering",
      "input_schema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "project": {
            "type": "string"
          }
        },
        "required": [
          "query"
        ]
      }
    },
    {
      "name": "list_memories",
      "description": "List all memories with filtering",
      "input_schema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          }
        }
      }
    },
    {
      "name": "get_memory",
      "description": "Retrieve a specific memory by ID",
      "input_schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      }
    },
    {
      "name": "delete_memory",
      "description": "Delete a memory by ID",
      "input_schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      }
    },
    {
      "name": "create_task",
      "description": "Create a new task with memory linking",
      "input_schema": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "project": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "parent_task": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "auto_link": {
            "type": "boolean"
          },
          "manual_memories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "project"
        ]
      }
    },
    {
      "name": "update_task",
      "description": "Update task status and details",
      "input_schema": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "todo",
              "in_progress",
              "done",
              "blocked"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "add_memories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_memories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_subtasks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "task_id"
        ]
      }
    },
    {
      "name": "list_tasks",
      "description": "List tasks with filtering",
      "input_schema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "has_memory": {
            "type": "string"
          },
          "include_subtasks": {
            "type": "boolean"
          },
          "limit": {
            "type": "number"
          }
        }
      }
    },
    {
      "name": "get_task_context",
      "description": "Get detailed task information",
      "input_schema": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          },
          "depth": {
            "type": "string",
            "enum": [
              "direct",
              "deep"
            ]
          }
        },
        "required": [
          "task_id"
        ]
      }
    },
    {
      "name": "delete_task",
      "description": "Delete a task and subtasks",
      "input_schema": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          }
        },
        "required": [
          "task_id"
        ]
      }
    },
    {
      "name": "generate_dropoff",
      "description": "Generate session handoff document",
      "input_schema": {
        "type": "object",
        "properties": {
          "session_summary": {
            "type": "string"
          },
          "include_recent_memories": {
            "type": "boolean"
          },
          "include_git_status": {
            "type": "boolean"
          },
          "recent_memory_count": {
            "type": "number"
          },
          "output_format": {
            "type": "string",
            "enum": [
              "markdown",
              "json"
            ]
          },
          "output_path": {
            "type": "string"
          }
        }
      }
    },
    {
      "name": "test_tool",
      "description": "Verify MCP connection",
      "input_schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      }
    }
  ],
  "configuration": {
    "memory_dir": {
      "type": "string",
      "default": "~/Documents/like-i-said-memories",
      "description": "Directory for storing memories"
    },
    "task_dir": {
      "type": "string",
      "default": "~/Documents/like-i-said-tasks",
      "description": "Directory for storing tasks"
    },
    "auto_backup": {
      "type": "boolean",
      "default": true,
      "description": "Enable automatic backups"
    },
    "debug_mode": {
      "type": "boolean",
      "default": false,
      "description": "Enable debug logging"
    }
  },
  "installation": {
    "instructions": [
      "1. The launcher will automatically select the best approach",
      "2. Run with --diagnostic flag to troubleshoot issues",
      "3. Multiple fallback strategies ensure compatibility",
      "4. Check logs in like-i-said-launcher.log for details"
    ],
    "requirements": {
      "preferred": [
        "python3",
        "node"
      ],
      "minimum": [
        "python3 OR node"
      ]
    }
  }
}