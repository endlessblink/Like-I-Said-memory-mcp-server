name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/**' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16.x, 18.x, 20.x]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: macos-latest
            node-version: 16.x
          - os: windows-latest
            node-version: 16.x

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test
      env:
        CI: true
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        CI: true
    
    - name: Run MCP server test
      run: npm run test:mcp
      if: matrix.os == 'ubuntu-latest'
    
    - name: Generate coverage report
      run: npm run test:coverage
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Verify build output
      run: |
        if [ ! -d "dist" ]; then
          echo "Build failed: dist directory not found"
          exit 1
        fi
        echo "Build successful: dist directory found"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run dependency check
      run: |
        npm list --depth=0 --json > dependencies.json
        echo "Dependencies check completed"

  test-installation:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Test NPX installation
      run: |
        npm pack
        npx ./*.tgz like-i-said-v2 --version
      continue-on-error: true
    
    - name: Test manual installation
      run: |
        npm install
        node cli.js --version

  publish:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Publish to NPM
      run: |
        npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub release assets
      run: |
        npm pack
        mv *.tgz like-i-said-v2-${{ github.event.release.tag_name }}.tgz
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./like-i-said-v2-${{ github.event.release.tag_name }}.tgz
        asset_name: like-i-said-v2-${{ github.event.release.tag_name }}.tgz
        asset_content_type: application/gzip